A1a. What is Pseudocode 

Pseudocode and flowcharts are both popular ways of representing algorithms. 

Flowcharts 

Pseudocode is representing an algorithm because it is easy to read and write, and allows the programmer to concentrate on the logic of the problem. Pseudocode is really structured English 

 A pseudocode should involve sequence control structures only; there are no decisions or loops, so the solution algorithms are relatively simple. 

An example  can be seen below where we print the name and address of a 50 students 

Set student_total to zero 

DOWHILE student_total < 50 

Read student record 

Print student name, address to report 

add 1 to student_total 

ENDDO 

 

A1b Write pseudocode for a program that sets a variable named username as “MyUserName” and another variable named password as "MyPassword" then asks the user to enter the username and password. If the correct username and password are entered the program should display “Logged in” otherwise the program should display either “Incorrect Password” or “Incorrect Username” as appropriate. It should also allow the user to make another attempt at entering the correct combination. The user should be allowed a maximum of THREE attempts to get the correct password. 

 

Answer 

 

Sign_in 

Set username =  "MyUserName" 

Set password  = "MyPassword" 

Prompt user for clientUserName, clientPassword 

Read clientUserName, clientPassword 

Set count_of_attempts = 0; 

Set isLoggedIn = false; 

Set message = ""; 

 

DOWHILE (count_of_attempts<3 and isLoggedIn  is false) 

{ 

IF(clientUserName is equal to username ) 

isLoggedIn  = true 

Else  

{ 

isLoggedIn  = false; 

message = "Incorrect Username" 

} 

ENDIF 

 

IF(clientPassword is equal to password) 

isLoggedIn  = true 

Else  

{ 

isLoggedIn  = false; 

message = "Incorrect Username" 

} 

ENDIF 

 

IF(isLoggedIn   is false) 

count_of_attempts = count_of_attempts + 1; 

 

} 

ENDIF 

 

IF(isLoggedIn is true) Output  Logged In 

Else Output message 

ENDIF 

ENDDO 

END 

 

 

A1c Consider an investment plan where a fixed amount is invested at the beginning of each year of the plan and an amount of interest is added at the end of each year. The interest rate is fixed throughout the duration of the plan. For example, if the amount invested each year is £10 and the interest rate is 10% then the following table contains details of the account over 3 years: Year number Balance at start of year Interest paid Balance at end of year  

Year number 
Balance at start of 
ear 
10 
33.1 
Interest paid 
3.31 
Balance at end of 
ear 
23.1 
36.41 
 

Write pseudocode for a program to calculate the value of the investment at the end of each year for a given number of years. The inputs to the program will be the yearly investment, the interest rate, and the number of years for the investment. The output will be the value of the investment at the end of each year; so, if seven years are being considered there will be seven lines of output. 

 

 

Answer  

INVESTMENT_PLAN 

Read number_of_years 

Set running_total=0 

Set current_year = 1 

DOWHILE(current_year <number_of_years) 

 

Read Investment_amount, interest_rate for year current_year   

 

If(current_year equals 1) 

running_total  = Investment_amount 

ENDIF 
 

Interest_amount =interest_rate/100 * running_total 

running_total= running_total + Interest_amount  

Output running_total 

running_total = Investment_amount + running_total  

 current_year =  current_year +1 

 

ENDDO 

 

END 

 

A2 

The examination scores for a number of students are stored in a two-dimensional array(Python programmers might call this a “list of lists”). The array contains FOUR elements related to each student. The FIRST element contains the student’s name. The remaining three store examination marks for three separate examinations. The information stored in the array is shown in the following table: 

Name 
Steve 
M ike 
Paul 
Examination 1 
55 
75 
71 
Examination 2 
60 
85 
78 
Examination 3 
75 
90 
78 
 

a. Write a program to search the array to find the results for a given student. The program should obtain the student’s name from the user then search for it in the array. If it is found the results for that student should be displayed. If the student name is NOT found the user should be informed that no results have been recorded for that student. 

 

 

Search_Student_Record 

Create an array named matrix of length 3 with items of string arrays of length 4 

Store item 1 with steve, 55, 60, 75 in matrix 

Store item 2 with mike, 75, 85, 90 in matrix  

Store item 3 with paul, 71, 78, 78 in matrix   

Prompt user for student_name 

Get student_name 

FOR  j =0 To j=(length of matrix-1) 

 IF matrix[j][0] equals  

Output The result of student_name is matrix[j][1],matrix[j][2],matrix[j][3], 

ELSE 

Output no results of student_name has been recorded 

ENDIF 

Increment j   

NEXT 

END 

 

 

b. Write a program that accesses each student in the two-dimensional array, adds up the marks they have obtained for the THREE exams then displays their total marks before moving on to the next student. 

 

Access_Students_Record 

Create an array named matrix of length 3 with items of string arrays of length 4 

Store item 1 with steve, 55, 60, 75 in matrix 

Store item 2 with mike, 75, 85, 90 in matrix  

Store item 3 with paul, 71, 78, 78 in matrix   

FOR  j =0 To j=(length of matrix-1) 

Set total =0 

FOR k=1 To k=(length of j-1) 

total = total + matrix[j][k] 

Increment k  

NEXT 

Output total 

Increment j   

NEXT 

END 

 

 

c. Assume that the content of the two-dimensional array has been sorted alphabetically by student name. Explain how a binary search algorithm might be used to search for a specific student name. Illustrate your answer using some sample data. It is NOT necessary to provide code. 

 

A binary search divides the sorted array into 2 and checks If the value of our search falls in the range of the first half or second half. It keeps dividing the result into 2 until it finds the value.  

e.g if we are looking for a number between 1 and 100, lets say 20 we divide 100/2 and we get 50.  

Check if 20 is greater than 50 or less. It is obviously less. So we focus on 1 to 50. Divide 50/2 and we get 25. We check if 20 is less than 25 or greater. It is greater so we check between 1 and 25. We divide 25 

25/2. This won't give a whole number so we pick the middle number which is 13. 13 is less than 20 so we pick between 13 and 25. The middle number between 13 and 25 is 19. We check if 20 is greater. Yes. We check between 20 and 25. 20 is in the first hald. We check between 20 and 22. 20 is less than 21. We are left with only 20 so we check if 20 is equal and that's our value 

 

A4 

Application Software 

System Software 

An application is any program, or group of programs, that is designed for the end user. Applications software (also called end-user programs) include such things as database programs, word processors, Web browsers and spreadsheets.  

Systems software includes the programs that are dedicated to managing the computer itself, such as the operating system, file management utilities, and disk operating system 

 

Algorithm 

Program 

An algorithm is like a recipe: it lists the steps involved in accomplishing atask. It can be defined in programming terms as a set of detailed, unambiguousand ordered instructions developed to describe the processes necessary toproduce the desired output from a given input. 

An algorithm is a self-contained step-by-step set of operations to be performed to solve a specific problem or a class of problems. 

A computer program is a specific sequence of instructions in a specific programming language. A program may contain the implementation of many algorithms. 

 

An algorithm consists of simply the steps (machine independent) needed to be followed in some order to solve a problem. 

A program is an instruction set for a specific type of machine to put an algorithm to practice 

 

 

High level language 

Low Level Language 

Machine Language 

A high-level language is a programming language designed to simplify computer programming. It is "high-level" since it is several steps removed from the actual code run on a computer's processor. High-level source code contains easy-to-read syntax that is later converted into a low-level language, which can be recognized and run by a specific CPU. 
E.g C#, Java, Python 

A low-level language is a type of programming language that contains basic instructions recognized by a computer. Unlike high-level languages used by software developers, low-level code is often cryptic and not human-readable. Two common types of low-level programming languages are assembly language and machine language. 

Machine language, or machine code, is the lowest level of computer languages. It contains binary code, often generated by compiling high-level source code for a specific processor. 

 

Interpreter 

Compiler 

An Interpreter directly executes instructions written in a programming or scripting language without previously converting them to an object code or machine code. 

A compiler is a special program that processes statements written in a particular programming language and turns them into machine language or "code" that a computer's processor uses 

Interpreter translates just one statement of the program at a time into machine code. 

Compiler scans the entire program and translates the whole of it into machine code at once. 

An interpreter takes very less time to analyze the source code. However, the overall time to execute the process is much slower. 

A compiler takes a lot of time to analyze the source code. However, the overall time taken to execute the process is much faster. 

An interpreter does not generate an intermediary code. Hence, an interpreter is highly efficient in terms of its memory. 

A compiler always generates an intermediary object code. It will need further linking. Hence more memory is needed. 

Keeps translating the program continuously till the first error is confronted. If any error is spotted, it stops working and hence debugging becomes easy. 

A compiler generates the error message only after it scans the complete program and hence debugging is relatively harder while working with a compiler. 

Interpreters are used by programming languages like Ruby and Python for example. 

Compliers are used by programming languages like C and C++ for example. 

 

Syntax 

Semantics 

The syntax of a programming language is a collection of rules to specify the structure or form of code whereas 

semantics refers to the interpretation of the code or the associated meaning of the symbols, characters or any part of a program 

Syntax refers to the structure of a program written in a programming language.  

semantics describes the relationship between the sense of the program and the computational model. 

Syntactic errors are handled at the compile time. 

semantic errors are difficult to find and encounters at the runtime. 

For example, in c++ a variable “s” is declared as “int s;”, to initialize it we must use an integer value. Instead of using integer we have initialized it with “Seven”. This declaration and initialization is syntactically correct  

 

but semantically incorrect because “Seven” does not represent integer form. 

 

 

 

A4b 

Identify and briefly describe FIVE distinct steps in the software development process. 

*Design: During the design phase, the actual conceptualizing of the solution is created, that is the detailed software architecture meeting specific project requirements is created. 

*Development and coding: The development phase is about writing code and converting design documentation into the actual software within the software development process. 

*Integration and tesitng: This phase consists of testing and integration. Functionality, Integration and Interoperability tests are carried out by a quality assurance team as well as user acceptance test 

*Implementation and deployment: This is a stage when the actual installation of the crafted solution takes place. It’s done step-by-step according to the implementation plan. 

*operations and maintenance: The final stage of software development lifecycle includes maintenance and regular updates. The phase is treated with the utmost attention since during the stage the product is polished, upgraded, enhanced and fine-tuned according to the real-world feedbacks on its performance. 

 

Section B 

B5 

A factor is a number that divides into another number exactly without leaving a remainder. For example, the factors of 24 are 1,2,3,4,6,12 and 24. Two numbers may share the same factors. For example, 24 and 54 have common factors of 1,2,3 and 6, with 6 being the Greatest Common Factor (GCF). 

 

B5a.Write an algorithm that will find the Greatest Common Factor (GCF) of TWO positive whole numbers. 

 

Answer 

Step 1: Get the first positive number and go to step 6,7,8,9 

Step 2: Get the collections of Step 9 

Step 3 Get the second positive number and go to step 6,7,8,9 

Step 4: Get the collections of Step 9 

Step 5: Compare the numbers in both collections and find the greatest common number and display the 

Step 6: Get the factors of a given number 

Step 7: Count from 1 to that given number 

Step 8: Divide the given number by each count 

Step 9: If the given number is divisible by each count that have a remainder of zero then keep in a collection for that given number 

output 

 

B5b. Express your algorithm as a function called GCF in a programming language of your choice or in pseudocode. 

 

Start procedure GCF 

Read number1, number2 

Store number1 and number2 in a collection 

Create collection_of_factors1, collection_of_factors2 

Set gcf=0 

IF first positive number is greater than zero 

Set count = 1; 

FOR count = 1 TO first positive number 

IF first positive number modulus count is equal to zero 

Add count to collection_of_factors1 

ENDIF 

NEXT 

ENDIF 

IF second positive number is greater than zero 

Set count = 1; 

FOR count = 1 TO second positive number 

IF second positive number modulus count is equal to zero 

Add count to collection_of_factors2 

ENDIF 

NEXT 

ENDIF 

 

FOR last item in collection_of_factors1 

FOR last item in collection_of_factors2 

Compare item of collection 2 with item of collection 1 

IF match is found 

gcf = item 

ENDIF 

 

Decrement item index 

NEXT 

Decrement item index 

NEXT 

 

Return gcf 

 

END 

 

B6 

Choose a sorting technique in which you are familiar to answer parts a) and b) of this question. 

a.Describe your chosen sorting technique showing each stage of processing required to sort the following array into descending order (highest to lowest numerical value).  

Array{14, 33. 25, 10, 35,19, 42} 

 

Answer 

 

 

 

 

b.Explain your sorting technique in program code using either pseudocode or a programming language of your choice. 

 

Answer 

 

B7 

Many organisations develop software they require “in-house”, meaning that they resource the development using their own teams of programmers and support an IT infrastructure.  

 

 

 

I. Outsourcing the development; 

Advantages 

Disadvantages 

Cost factors 

Communication: Cultural misalignment, Time zone differences,  

Finding the right skill set: Due to domestic talent shortages, organizations find outsourced services to fill in the gap 

Company morale: The vast majority of the time, outsourcing is not designed to replace in-house employees but is used in parallel with ramping up headcount internally. However, some staff may view outsourcing as a threat to their role within the organization, which can lead to a decrease in productivity and reluctance to integrate an outsourced partner into the team. 

Saving time: Finding and interviewing candidates, negotiating compensation and onboarding a new employee takes time – only for some to leave a year or two later for a new opportunity. Working with an outsourcing partner allows you to delegate a lot of the recruitment process, enabling tech leaders to allocate their time and energy to more high-value initiatives for the company. 

Quality: Concerns over code quality are valid. A lot of dev shops around the world hire low-level talent ill-equipped to work with clients, or pitch an “A team” then transfer the project a few months later to less experienced developers (a strategy known as “bait and switch”). 

Additional capacity, 

missed deliverables 

executing on larger business goals 

low return on your investment. 

saving money 

 

accessing skills not available in-house. 

 

 

ii. Purchasing a bespoke software package. 

Advantages 

Disadvantage 

Individually Crafted Solution: Bespoke software is similar to a custom-tailored suit. It fits your parameters perfectly. Meanwhile, the suit you buy at a discount shop usually needs some adjustments to look good. The same is true for off-the-shelf products. They are an all-purpose solution, which can be used by many companies, and often you end up trying to change your business to fit the technology rather than fitting the technology to your business. 

Initial Costs: Bespoke software projects often cost more than off-the-shelf solutions, due to the amount of time and effort needed to create masterpieces. Eventually, however, the benefits such software gives you can bring you much more money than you spend on it. 

Return On Investment: While bespoke software development involves investment, you can often start experiencing financial benefits almost immediately. When it is well planned and well built, the time/human resource savings can quickly pay for themselves, as can the competitive edge you can gain from developing better systems than your rivals. 

Waiting Time: Since bespoke software is created from scratch, you will need to wait some time for your developers to build it. However, as it is the perfect fit for your business, it is (in our opinion) worth the wait. 

Better Security:Common off-the-shelf products have one huge disadvantage: Hackers know all the ins and outs of such programs and often take advantage of the weaknesses. That’s why you can’t feel 100% secure when using such software. Meanwhile, custom-made programs are only exploited by your business, cutting the chances of hacks and break-ins to a minimum. It also reduces the incentive for hacking – with an off-the-shelf product, if you are successful in hacking one system you can potentially access thousands more. 

 

Scalability:If your company grows or expands to cover other market sectors, the off-the-shelf solution may not cope – and you have little or no input in the way the system develops over time. Bespoke software can develop and grow together with your business. Make IT Simple offers lifetime product support to help you change the program whenever needed. 

 

 

B7b What is meant by the term “hosting on the cloud”? Explain how it is associated with outsourcing.  

Cloud hosting makes applications and websites accessible using cloud resources. Unlike traditional hosting, solutions are not deployed on a single server. Instead, a network of connected virtual and physical cloud servers hosts the application or website, ensuring greater flexibility and scalability. 

 

 

Cloud computing is a subscription-based service that offers on-demand network access to a shared pool of configurable computer resources (e.g., networks, applications, servers, storage, etc.) that is usually hosted by the supplier and provided over the Internet 

 

Cloud services are outsourcing without a single dedicated data center.  

 

B8: Write short notes on EACH of the following pairs of related programming terms, highlighting any differences between them 

 

I.Recursion is when a statement in a function calls itself repeatedly. The iteration is when a loop repeatedly executes until the controlling condition becomes false. The primary difference between recursion and iteration is that recursion is a process, always applied to a function and iteration is applied to the set of instructions which we want to get repeatedly executed. 

 

II. An object-oriented program usually contains different types of objects, each corresponding to a particular kind of complex data to manage, or perhaps to a real-world object or concept such as a bank account, a hockey player, or a bulldozer. 

 

Modular programming (also called "top-down design" and "stepwise refinement") is a software design technique that emphasizes separating the functionality of a program into independent, interchangeable modules, such that each contains everything necessary to execute only one aspect of the desired functionality. 

 

III. A procedure performs a task, whereas a function produces information. Functions differ from procedures in that functions return values, unlike procedures which do not. However, parameters can be passed to both procedures and functions. 

 

B9 

#include<stdio.h> int main(){int m=40,n=20; int o=20,p=30;if (m>n && m !=0){ printf("&& condition1\n");}if (o>p || p!=20){printf("||condition2\n"); }if (!(m>n && m !=p)) { printf("!: condition3\n");} } 

 

a.Rewrite the code to improve the layout and structure of the code to make it easier to read. 

  

#include<stdio.h> 

int main(){ 

int m=40,n=20;  

int o=20,p=30; 

if (m>n && m !=0){  

printf("&& condition1\n"); 

} 

if (o>p || p!=20){ 

printf("||condition2\n"); 

 } 

if (!(m>n && m !=p)) {  

printf("!: condition3\n"); 

}  

} 

 

b.Calculate the result of executing the code. Explain your answer. 

Answer 

True 

True  

false 

 

First condition is a logical AND. Returns true if both conditions are true there fore m is greater than n and m is not equal to 0 

Second condition is a logical OR. Returns true if any of the conditions are true therefore p!=20 which is true 

Third condition is a Boolean operation NOT.  it inverts the final result. The result for the Logical ANDis true, therefore a NOT operator inverts the result to false 

 

B10 

Description 
RegNumber 
Make 
YearofManufacture 
Date purchased 
PurchasePrice 
BalancePaid? 
Data sample 
YW67 XAR 
Audi 
2006 
13/10/2019 
E3889.OO 
YES 
 

 

a.Provide an example of EACH of the following properties present in the above data file:  

RECORD 

FIELD 

BOOLEAN DATA TYPE 

 

 

 

 

b. Give FIVE operations on data files that are supported by most programming environments.  

Read 

Write 

Append 

Open  

Close 

 

c.  
